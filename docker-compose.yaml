

services:
  postgres:
    image: postgres:latest
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: hivemq
      POSTGRES_PASSWORD: secretpassword
      POSTGRES_DB: hivemq_ESE
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "hivemq", "-d", "hivemq_ESE"]
      interval: 10s
      retries: 5

  hivemq:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        HIVEMQ_VERSION: ${HIVEMQ_VERSION}
    container_name: hivemq_broker
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "1883:1883"  # MQTT
      - "8883:8883"  # Secure MQTT
      - "8080:8080"  # Web UI
      - "8888:8888"  # API
      - "9399:9399"  # Prometius
    environment:
      HIVEMQ_DATABASE_HOST: postgres
      HIVEMQ_DATABASE_PORT: 5432
      HIVEMQ_DATABASE_USER: hivemq
      HIVEMQ_DATABASE_PASSWORD: secretpassword

  swarm:
    build:
      context: .
      dockerfile: Dockerfile-Swarm 
      args:
        HIVEMQ_VERSION: ${HIVEMQ_VERSION}
    container_name: hivemq_swarm

      
  redpanda-0:
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      # Address the broker advertises to clients that connect to the Kafka API.
      # Use the internal addresses to connect to the Redpanda brokers'
      # from inside the same Docker network.
      # Use the external addresses to connect to the Redpanda brokers'
      # from outside the Docker network.
      - --advertise-kafka-addr internal://redpanda-0:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      # Address the broker advertises to clients that connect to the HTTP Proxy.
      - --advertise-pandaproxy-addr internal://redpanda-0:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      # Redpanda brokers use the RPC API to communicate with each other internally.
      - --rpc-addr redpanda-0:33145
      - --advertise-rpc-addr redpanda-0:33145
      # Mode dev-container uses well-known configuration properties for development in containers.
      - --mode dev-container
      # Tells Seastar (the framework Redpanda uses under the hood) to use 1 core on the system.
      - --smp 1
      - --default-log-level=info
    image: docker.redpanda.com/redpandadata/redpanda:v${REDPANDA_VERSION:?Set a Redpanda version}
    container_name: redpanda-0
    volumes:
      - redpanda-0:/var/lib/redpanda/data
    #networks:
    #  - redpanda_network
    ports:
      - 18081:18081
      - 18082:18082
      - 19092:19092
      - 19644:9644
  console:
    container_name: redpanda-console
    image: docker.redpanda.com/redpandadata/console:v${REDPANDA_CONSOLE_VERSION:?Set a Redpanda Console version}
    #networks:
    #  - redpanda_network
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda-0:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda-0:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda-0:9644"]
    ports:
      - 8090:8080
    depends_on:
      - redpanda-0

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./provisioning/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"



  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./provisioning/dashboards:/etc/grafana/provisioning/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_PASSWORD__SET=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
    depends_on:
      - prometheus

      
volumes:
  hivemq_data:
    driver: local
  pgdata:
  redpanda-0: null
